From 3f5f444bc6112fff85b369143fab3d5e1a0f8eb6 Mon Sep 17 00:00:00 2001
From: Urmila Reddi <reddiurmila012@gmail.com>
Date: Fri, 5 Jul 2024 20:30:07 +0530
Subject: [PATCH] Add files via upload

---
 App.css            | 49 ++++++++++++++++++++++++++++++
 App.test.js        |  9 ++++++
 App.tsx            | 74 ++++++++++++++++++++++++++++++++++++++++++++++
 DataStreamer.ts    | 40 +++++++++++++++++++++++++
 Graph.css          |  4 +++
 Graph.tsx          | 73 +++++++++++++++++++++++++++++++++++++++++++++
 index.css          | 14 +++++++++
 index.tsx          | 14 +++++++++
 react-app-env.d.ts |  1 +
 9 files changed, 278 insertions(+)
 create mode 100644 App.css
 create mode 100644 App.test.js
 create mode 100644 App.tsx
 create mode 100644 DataStreamer.ts
 create mode 100644 Graph.css
 create mode 100644 Graph.tsx
 create mode 100644 index.css
 create mode 100644 index.tsx
 create mode 100644 react-app-env.d.ts

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..94b8cf3 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,13 +1,15 @@
-import React, { Component } from 'react';
-import DataStreamer, { ServerRespond } from './DataStreamer';
+import React, {Component} from 'react';
+import DataStreamer, {ServerRespond} from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
+import {setInterval} from "timers";
 
 /**
  * State declaration for <App />
  */
 interface IState {
-  data: ServerRespond[],
+    data: ServerRespond[],
+    showGraph: boolean
 }
 
 /**
@@ -15,60 +17,73 @@ interface IState {
  * It renders title, button and Graph react element.
  */
 class App extends Component<{}, IState> {
-  constructor(props: {}) {
-    super(props);
+    constructor(props: {}) {
+        super(props);
 
-    this.state = {
-      // data saves the server responds.
-      // We use this state to parse data down to the child element (Graph) as element property
-      data: [],
-    };
-  }
+        this.state = {
+            // data saves the server responds.
+            // We use this state to parse data down to the child element (Graph) as element property
+            data: [],
+            showGraph: false
+        };
+    }
 
-  /**
-   * Render Graph react component with state.data parse as property data
-   */
-  renderGraph() {
-    return (<Graph data={this.state.data}/>)
-  }
+    /**
+     * Render Graph react component with state.data parse as property data
+     */
+    renderGraph() {
+        if (this.state.showGraph) {
+            return (<Graph data={this.state.data}/>)
+        }
+    }
 
-  /**
-   * Get new data from server and update the state with the new data
-   */
-  getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
-  }
+    /**
+     * Get new data from server and update the state with the new data
+     */
+    getDataFromServer() {
+        let x = 0;
+        const interval = setInterval(() => {
+            DataStreamer.getData((serverResponds: ServerRespond[]) => {
+                this.setState({
+                    data: serverResponds,
+                    showGraph: true
+                });
+            });
+            x++;
+            if (x > 1000) {
+                clearInterval(interval);
+            }
+        }, 100);
+    }
 
-  /**
-   * Render the App react component
-   */
-  render() {
-    return (
-      <div className="App">
-        <header className="App-header">
-          Bank & Merge Co Task 2
-        </header>
-        <div className="App-content">
-          <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
-            Start Streaming Data
-          </button>
-          <div className="Graph">
-            {this.renderGraph()}
-          </div>
-        </div>
-      </div>
-    )
-  }
+    /**
+     * Render the App react component
+     */
+    render() {
+        return (
+            <div className="App">
+                <header className="App-header">
+                    Bank & Merge Co Task 2
+                </header>
+                <div className="App-content">
+                    <button className="btn btn-primary Stream-button"
+                        // when button is click, our react app tries to request
+                        // new data from the server.
+                        // As part of your task, update the getDataFromServer() function
+                        // to keep requesting the data every 100ms until the app is closed
+                        // or the server does not return anymore data.
+                            onClick={() => {
+                                this.getDataFromServer()
+                            }}>
+                        Start Streaming Data
+                    </button>
+                    <div className="Graph">
+                        {this.renderGraph()}
+                    </div>
+                </div>
+            </div>
+        )
+    }
 }
 
 export default App;
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..2b0cb17 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,21 +1,21 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
+import React, {Component} from 'react';
+import {Table} from '@finos/perspective';
+import {ServerRespond} from './DataStreamer';
 import './Graph.css';
 
 /**
  * Props declaration for <Graph />
  */
 interface IProps {
-  data: ServerRespond[],
+    data: ServerRespond[],
 }
 
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
-  load: (table: Table) => void,
+interface PerspectiveViewerElement extends HTMLElement {
+    load: (table: Table) => void,
 }
 
 /**
@@ -23,51 +23,58 @@ interface PerspectiveViewerElement {
  * parsed from its parent through data property.
  */
 class Graph extends Component<IProps, {}> {
-  // Perspective table
-  table: Table | undefined;
+    // Perspective table
+    table: Table | undefined;
 
-  render() {
-    return React.createElement('perspective-viewer');
-  }
+    render() {
+        return React.createElement('perspective-viewer');
+    }
 
-  componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    componentDidMount() {
+        // Get element to attach the table from the DOM.
+        const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
-    const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
-    };
+        const schema = {
+            stock: 'string',
+            top_ask_price: 'float',
+            top_bid_price: 'float',
+            timestamp: 'date',
+        };
 
-    if (window.perspective && window.perspective.worker()) {
-      this.table = window.perspective.worker().table(schema);
-    }
-    if (this.table) {
-      // Load the `table` in the `<perspective-viewer>` DOM reference.
+        if (window.perspective && window.perspective.worker()) {
+            this.table = window.perspective.worker().table(schema);
+        }
+        if (this.table) {
+            // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
-      elem.load(this.table);
+            // Add more Perspective configurations here.
+            elem.load(this.table);
+            elem.setAttribute("view", "y_line");
+            elem.setAttribute("column-pivots", '["stock"]');
+            elem.setAttribute("row_pivots", '["timestamp"]');
+            elem.setAttribute("columns", '["top_ask_price"]');
+            elem.setAttribute("aggregates",
+                '{"stock":"distinct_count", "top_ask_price":"avg", "top_bid_price":"avg", "timestamp":"distinct_count"}'
+            );
+        }
     }
-  }
 
-  componentDidUpdate() {
-    // Everytime the data props is updated, insert the data into Perspective table
-    if (this.table) {
-      // As part of the task, you need to fix the way we update the data props to
-      // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+    componentDidUpdate() {
+        // Everytime the data props is updated, insert the data into Perspective table
+        if (this.table) {
+            // As part of the task, you need to fix the way we update the data props to
+            // avoid inserting duplicated entries into Perspective table again.
+            this.table.update(this.props.data.map((el: any) => {
+                // Format the data from ServerRespond to the schema
+                return {
+                    stock: el.stock,
+                    top_ask_price: el.top_ask && el.top_ask.price || 0,
+                    top_bid_price: el.top_bid && el.top_bid.price || 0,
+                    timestamp: el.timestamp,
+                };
+            }));
+        }
     }
-  }
 }
 
 export default Graph;
-- 
2.34.1

